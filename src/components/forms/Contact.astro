---
import Title from "@components/global/Title.astro";

import { getLangFromUrl, useTranslations, useTranslatedPath } from "@i18n/utils";

const lang = getLangFromUrl(Astro.url);
const t = useTranslations(lang);
const translatePath = useTranslatedPath(lang);
---

<section class="isolate px-6 py-24 sm:py-32 lg:px-8">
	<div class="absolute inset-x-0 top-[-10rem] transform-gpu overflow-hidden blur-3xl sm:top-[-20rem]" aria-hidden="true">
		<div class="gradient-element"></div>
	</div>
	<div class="mx-auto">
		<Title class="pb-10 pt-20 uppercase" title={t("contact.title")} subtitle={t("contact.subtitle")} />
		<form id="contact-form" class="mx-auto max-w-2xl pt-12 lg:pt-20">
			<!-- Replace with your Access Key from Web3Forms -->
			<input type="hidden" name="access_key" value="c4f0a648-f24b-4924-8dea-d27ea9c10314" />
			<input type="hidden" name="subject" value="New Contact Form Submission from SviluppoZen" />
			<input type="checkbox" name="botcheck" class="hidden" style="display: none;" />
			<div class="grid grid-cols-1 gap-x-8 gap-y-6 sm:grid-cols-2">
				<div class="form-field sm:col-span-2">
					<label for="name" class="form-label">{t("contact.name")}*</label>
					<input type="text" name="name" id="name" autocomplete="given-name" required />
				</div>
				<div class="form-field sm:col-span-2">
					<label for="email" class="form-label">{t("contact.email")}*</label>
					<input type="email" name="email" id="email" autocomplete="email" required />
				</div>
				<div class="form-field sm:col-span-2">
					<label for="company" class="form-label">{t("contact.company")}</label>
					<input type="text" name="company" id="company" autocomplete="organization" />
				</div>
				<div class="form-field sm:col-span-2">
					<label for="service" class="form-label">{t("contact.service")}</label>
					<select name="service" id="service">
						<option value="websites">{t("contact.service.option.websites")}</option>
						<option value="apps">{t("contact.service.option.apps")}</option>
						<option value="uiux">{t("contact.service.option.uiux")}</option>
						<option value="seo">{t("contact.service.option.seo")}</option>
						<option value="hosting">{t("contact.service.option.hosting")}</option>
					</select>
				</div>
				<div class="form-field sm:col-span-2">
					<label for="message" class="form-label">{t("contact.message")}*</label>
					<textarea name="message" id="message" rows="4" required></textarea>
				</div>
				<div class="flex gap-x-4 sm:col-span-2">
					<label class="text-sm leading-6 text-gray-600" id="switch-1-label">
						{t("contact.agree")}
						<a href={translatePath("/privacy")} class="font-semibold text-slate-800">privacy policy</a>.
					</label>
				</div>
			</div>
			<div class="flex pt-10">
				<div class="squircle-bg rounded-lg bg-zinc-900">
					<button
						type="submit"
						class="flex h-10 w-full max-w-52 flex-1 items-center justify-center px-4 py-2 text-xl text-slate-200 transition-all hover:text-white sm:w-auto md:font-bold lg:h-10">
						{t("contact.send")}
					</button>
				</div>
			</div>
		</form>
	</div>
</section>

<script define:vars={{ thanksPath: translatePath("/thanks") }} is:inline>
	const form = document.getElementById("contact-form");
	const submitButton = form.querySelector("button[type='submit']");

	async function handleSubmit(event) {
		event.preventDefault();
		const formData = new FormData(event.target);
		const object = Object.fromEntries(formData.entries());
		const json = JSON.stringify(object);
		const originalButtonText = submitButton.textContent;

		submitButton.disabled = true;
		submitButton.textContent = "Sending...";

		try {
			const response = await fetch("https://api.web3forms.com/submit", {
				method: "POST",
				headers: {
					"Content-Type": "application/json",
					Accept: "application/json",
				},
				body: json,
			});

			const result = await response.json();
			if (result.success) {
				window.location.href = thanksPath;
			} else {
				console.error("Submission failed:", result);
				alert("Failed to send message. Please try again.");
			}
		} catch (error) {
			console.error("Form submission error:", error);
			alert("An error occurred. Please try again.");
		} finally {
			submitButton.disabled = false;
			submitButton.textContent = originalButtonText;
		}
	}

	form.addEventListener("submit", handleSubmit);
</script>

<style>
	.gradient-element {
		@apply relative left-1/2 -z-10 aspect-[1155/678] w-[36.125rem] max-w-none -translate-x-1/2 rotate-[30deg] bg-gradient-to-tr from-[#ff80b5] to-[#9089fc] opacity-30 sm:left-[calc(50%-40rem)] sm:w-[72.1875rem];
		clip-path: polygon(
			74.1% 44.1%,
			100% 61.6%,
			97.5% 26.9%,
			85.5% 0.1%,
			80.7% 2%,
			72.5% 32.5%,
			60.2% 62.4%,
			52.4% 68.1%,
			47.5% 58.3%,
			45.2% 34.5%,
			27.5% 76.7%,
			0.1% 64.9%,
			17.9% 100%,
			27.6% 76.8%,
			76.1% 97.7%,
			74.1% 44.1%
		);
	}

	.form-field {
		@apply block;
	}

	.form-label {
		@apply flex pl-1 text-sm font-semibold leading-6 text-gray-900;
	}

	input,
	textarea,
	select {
		@apply pointer-events-auto relative m-0 w-full cursor-text rounded-lg border-0 bg-slate-200 px-5 py-2 text-xl font-normal not-italic outline-none placeholder:text-gray-400 focus:ring-slate-500;
	}
</style>
